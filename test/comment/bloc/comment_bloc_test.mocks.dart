// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_project/test/comment/bloc/comment_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_project/comment/model/comment.dart' as _i3;
import 'package:flutter_project/comment/repository/comment_repository.dart'
    as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComment_1 extends _i1.SmartFake implements _i3.Comment {
  _FakeComment_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CommentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentRepository extends _i1.Mock implements _i4.CommentRepository {
  MockCommentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  _i6.Future<List<_i3.Comment>> fetchComments(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchComments,
          [postId],
        ),
        returnValue: _i6.Future<List<_i3.Comment>>.value(<_i3.Comment>[]),
      ) as _i6.Future<List<_i3.Comment>>);

  @override
  _i6.Future<_i3.Comment> addComment(_i3.Comment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i6.Future<_i3.Comment>.value(_FakeComment_1(
          this,
          Invocation.method(
            #addComment,
            [comment],
          ),
        )),
      ) as _i6.Future<_i3.Comment>);
}
